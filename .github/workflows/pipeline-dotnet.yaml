name: Reusable Workflow - dotnet

env:
  PUBLISHED_ROOT: './publish_output'  

on:
  workflow_call:
    inputs:
      dotnet-version:
        description: "dotnet version"
        required: false
        type: string
      
      project-path:
        description: "path to project"
        required: false
        type: string

      project-env:
        description: "Project environment"
        required: false
        type: string

      MY_TOKEN:
        description: "Token"
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      # - name: Set up dependency caching for faster builds
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.nuget/packages
      #     key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-nuget-
      
      - name: Restore dependencies & build with dotnet
        run: |
          cd ${{ inputs.project-path }}
          dotnet restore
          dotnet build --configuration Release --no-restore

      # - name: Sonatype Evaluate
      #   id: evaluate
      #   uses: sonatype/actions/evaluate@v1
      #   with:
      #     iq-server-url: ${{ secrets.SONATYPE_SERVER_URL }}
      #     username: ${{ secrets.SONATYPE_USERNAME }}
      #     password: ${{ secrets.SONATYPE_PASSWORD }}
      #     application-id: ${{ secrets.SONATYPE_APP_ID }}
      #     scan-targets: '${{ inputs.project-path }}/**/bin/Release/**/*.dll ${{ inputs.project-path }}/**/bin/Release/**/*.nupkg'
      
      # - name: Log evaluate action output
      #   run: echo "${{ steps.evaluate.outputs.scan-id }} ${{ steps.evaluate.outputs.report-url }}"

      # - name: Run Fortify on Demand SAST & SCA Scan
      #   uses: fortify/github-action@v2
      #   with:
      #     sast-scan: true
      #     debricked-sca-scan: true
      #   env:
      #     FOD_URL: https://ams.fortify.com
      #     FOD_TENANT: ${{secrets.FOD_TENANT}}
      #     FOD_USER: ${{secrets.FOD_USER}}
      #     FOD_PASSWORD: ${{secrets.FOD_PAT}}
      #     FOD_CLIENT_ID: ${{secrets.FOD_CLIENT_ID}}
      #     FOD_CLIENT_SECRET: ${{secrets.FOD_CLIENT_SECRET}}

      - name: dotnet publish
        run: |
          cd ${{ inputs.project-path }}  
          dotnet publish -c Release -o './published'
        
      - name: (TEST) Upload a Build Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: donet-artifact
          path: "${{ inputs.project-path }}/published"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.project-env }}

    steps:
      - name: (TEST) Download Build Artifact
        uses: actions/download-artifact@v5
        with:
          name: donet-artifact

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: (TEST) Delete artifacts
        run: |
          artifacts=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts[].id')
          for artifact_id in $artifacts; do
            gh api --method DELETE repos/${{ github.repository }}/actions/artifacts/$artifact_id
          done
        env:
          GITHUB_TOKEN: ${{ inputs.MY_TOKEN }}